import React, { createContext, useContext, useState, useEffect } from 'react';
import api from '../services/api';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(null);

  useEffect(() => {
    const storedToken = localStorage.getItem('auth_token');
    if (storedToken) {
      setToken(storedToken);
      // Check if the token is valid
      validateToken(storedToken);
    } else {
      setLoading(false);
    }
  }, []);

  const validateToken = async (storedToken) => {
    try {
      // Try to fetch user info with the token
      console.log('Validating token...');
      
      // First check if the API is accessible at all
      try {
        const healthCheck = await fetch('/api/health');
        console.log('API health check:', await healthCheck.text());
      } catch (e) {
        console.error('API health check failed:', e);
      }
      
      const response = await api.get('/auth/me');
      console.log('Token validation successful:', response.data);
      setUser(response.data.user);
    } catch (error) {
      console.error('Token validation failed:', error);
      console.log('Error details:', error.response ? error.response.data : 'No response data');
      localStorage.removeItem('auth_token');
    } finally {
      setLoading(false);
    }
  };

  const login = async (username, password) => {
    try {
      console.log('Attempting login with username:', username);
      const response = await api.post('/auth/login', { username, password });
      console.log('Login response:', response.data);
      
      if (response.data && response.data.access_token) {
        const { access_token, user: userData } = response.data;
        setToken(access_token);
        setUser(userData);
        localStorage.setItem('auth_token', access_token);
        return { success: true, user: userData };
      } else {
        console.error('Login response missing token or user data');
        return { success: false, error: 'Invalid response from server' };
      }
    } catch (error) {
      console.error('Login error:', error);
      return { 
        success: false, 
        error: error.response?.data?.error || 'Login failed. Please check your credentials.' 
      };
    }
  };

  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem('auth_token');
    delete api.defaults.headers.common['Authorization'];
  };

  const updateUser = (updatedUserData) => {
    setUser(prev => ({ ...prev, ...updatedUserData }));
  };

  return (
    <AuthContext.Provider value={{ user, loading, token, login, logout, updateUser }}>
      {children}
    </AuthContext.Provider>
  );
};
